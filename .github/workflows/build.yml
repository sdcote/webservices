# Continuous Integration (CI) build and publish to GCP Artifact Registry

name: Build

on:
  workflow_dispatch:
#  push:
#    branches:
#    - main

jobs:
  build:
    runs-on: [ubuntu-latest]
    
    permissions:
      contents: read
      id-token: write # Required for Google Workload Identity Federation

    outputs:
      # Output the artifact and the version so they can be passed to the deploy workflow
      built_version: ${{ steps.get-version.outputs.VERSION }}
      built_artifact: ${{ steps.get-version.outputs.ARTIFACT }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v4.2.2

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Debug GitHub Repository Context
        run: |
          echo "GitHub Repository Owner: ${{ github.repository_owner }}"
          echo "GitHub Repository Name: ${{ github.event.repository.name }}"
          echo "GitHub Repository Full: ${{ github.repository }}" 
          echo "GitHub Ref (Branch/Tag): ${{ github.ref }}"

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Test GCP Access Token with gcloud CLI
        run: |
          echo "--- Running gcloud auth print-access-token (default) ---"
          gcloud auth print-access-token || echo "Failed to print default access token"
          echo "--- Running gcloud auth print-access-token (impersonated) ---"
          gcloud auth print-access-token --impersonate-service-account="${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}" || echo "Failed to print impersonated access token"
          echo "--- gcloud config list ---"
          gcloud config list
          echo "--- gcloud auth list ---"
          gcloud auth list
        env:
          GCP_SERVICE_ACCOUNT_EMAIL: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Verify Authenticated GCP Identity
        run: gcloud auth list --format="yaml"
        # Optional: Add another to see current project
      - name: Verify Current GCP Project
        run: gcloud config get-value project
        
      - name: Get Maven project artifact
        id: get-artifact
        run: |
          ARTIFACT=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)
          echo "ARTIFACT=$ARTIFACT" >> $GITHUB_OUTPUT
        working-directory: ${{ github.workspace }} # Ensure maven is run from the project root

      - name: Get Maven project version
        id: get-version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        working-directory: ${{ github.workspace }} # Ensure maven is run from the project root

      - name: Build and push Docker image
        # The 'deploy' phase will trigger Jib to build and push
        run: mvn -B -U -X clean install deploy --file pom.xml
        working-directory: ${{ github.workspace }}

# Commented-out while debugging GCP authentication
#      - name: Call Deploy Workflow (Continuous Deployment)
#        uses: ./.github/workflows/deploy.yml # Path to your reusable deploy workflow
#        with:
#          artifact: ${{ steps.get-version.outputs.ARTIFACT }} # Pass the name of the artifact to pull from the artifact registry
#          version: ${{ steps.get-version.outputs.VERSION }} # Pass the version of the artifact
#          secrets: inherit # Pass all secrets from this workflow to the called workflow

